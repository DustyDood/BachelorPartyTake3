@inject IJSRuntime JSRuntime
@page "/Stepfour"

<h3>Puzzle Four</h3>

<p>As our day comes to an end, I think you might be able to figure this one out just by distance. Good luck!</p>

<button class="btn btn-primary" @onclick="GetLocationAsync">Find your location async below</button>


@if (LocationFound)
{
    <p>Latitude: @Latitude</p>
    <p>Longitude: @Longitude</p>
    <p>You are currently @Distance miles away from the target!</p>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

@if (LocationFound)
{
    <p>You are close enough! Congrats!</p>
    <button class="btn btn-primary">Click me once you have finished this location's activity!</button>
}

@code {
    PositionData Position { get; set; } = new PositionData();
    private string? Latitude { get; set; }
    private string? Longitude { get; set; }
    private double Distance { get; set; }
    private string? ErrorMessage { get; set; }
    public bool LocationFound { get; set; }

    private double TargetLatitude { get; set; } = 34.01919064639046;
    private double TargetLongitude { get; set; } = -118.33475988714115;



    private async Task GetLocationAsync()
    {
        Console.WriteLine("Button pressed!");
        await JSRuntime.InvokeVoidAsync("geolocationInterop.getCurrentPosition", DotNetObjectReference.Create(this));
        Distance = CalculateDistance(Position.Latitude, Position.Longitude, TargetLatitude, TargetLongitude);

        if (Distance < 0.1) LocationFound = true;
    }

    [JSInvokable]
    public void ReceivePosition(PositionData position)
    {
        Latitude = position.Latitude.ToString();
        Longitude = position.Longitude.ToString();
        Position.Latitude = position.Latitude;
        Position.Longitude = position.Longitude;
        Console.WriteLine("Location grabbed");
    }

    [JSInvokable]
    public void ReceiveError(string message)
    {
        ErrorMessage = $"Error retrieving location: {message}";
        LocationFound = false;
    }

    public class PositionData
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371; // Radius of Earth in kilometers
        var dLat = ToRadians(lat2 - lat1);
        var dLon = ToRadians(lon2 - lon1);

        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return Math.Round(R * c * 0.621371, 2);
    }

    private double ToRadians(double deg) => deg * Math.PI / 180;
}

