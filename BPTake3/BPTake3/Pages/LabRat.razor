@inject IJSRuntime JSRuntime


@page "/StepOne"

<h1>Success!</h1>

<p>Now that we've confirmed that things are good, <strong>YOU</strong> will be in charge of distributing the next clues!</p>

<p>Go ahead and use the links below to get things rolling!</p>

<p>Author's note: I could have set up these links with phone numbers, but I didn't want everyone's number to be public and github pages doesn't allow for secret grabbing soooo please replace their names with their phone number. Thank you!</p>

<h2 class="fw-bold">Part 1: Take a look</h2>
<a class="fs-2" href="sms:+Drew?body=An%20item%20of%20the%20UPMOST%20importance%20(3)">First</a>
<br />
<a class="fs-2" href="sms:+Nick?body=The%20first%20key%20on%20a%20keyboard%20(3)">Second</a>
<br />
<br />


<h2 class="fw-bold">Part 2: Sound it out</h2>

<a class="fs-2" href="sms:+Kevin?body=%20%20%20%20The%20rival%20to%20Kira(1)%0A%20%20%20%20Canadian%20Confirmation(2)%0A%20%20%20%20The%20apiary%20animal(3)">Third</a>
<br />
<a class="fs-2" href="sms:+Yourself?body=Singular%20%3A%20is%20%3A%3A%20Plural%20%3A%3A%20%3F%20(3)%0AUnder%20my%20Umbrella%20(1)%0AA%20suffix%20to%20high%3B%20a%20prefix%20to%20party%20(3)">Fourth</a>
<br />
<br />

<button class="btn btn-primary" @onclick="GetLocationAsync">Find your location async below</button>


@if (LocationFound)
{
    <p>Latitude: @Latitude</p>
    <p>Longitude: @Longitude</p>
    <p>You are currently @Distance miles away from the target!</p>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

@if (LocationFound == false && numberOfGuess >= 3)
{
    <button class="btn btn-secondary" @onclick="() => LocationFound = !LocationFound">Things aren't cooperating? Click me to move on.</button>
}

@if (LocationFound)
{
    <p>You are close enough! Congrats!</p>
    <button class="btn btn-primary">Click me once you have finished this location's activity!</button>
}


@code {
    PositionData Position { get; set; } = new PositionData();
    private string? Latitude { get; set; }
    private string? Longitude { get; set; }
    private double Distance { get; set; }
    private string? ErrorMessage { get; set; }
    public bool LocationFound { get; set; }
    public int numberOfGuess = 0;


    // DUSTY: Updated!
    private double TargetLatitude { get; set; } = 34.03942773600165;
    private double TargetLongitude { get; set; } = -118.32021314527354;


    private async Task GetLocationAsync()
    {
        Console.WriteLine("Button pressed!");
        await JSRuntime.InvokeVoidAsync("geolocationInterop.getCurrentPosition", DotNetObjectReference.Create(this));
        Distance = CalculateDistance(Position.Latitude, Position.Longitude, TargetLatitude, TargetLongitude);

        if (Distance < 0.1) LocationFound = true;
    }

    [JSInvokable]
    public void ReceivePosition(PositionData position)
    {
        Latitude = position.Latitude.ToString();
        Longitude = position.Longitude.ToString();
        Position.Latitude = position.Latitude;
        Position.Longitude = position.Longitude;
        Console.WriteLine("Location grabbed");
    }

    [JSInvokable]
    public void ReceiveError(string message)
    {
        ErrorMessage = $"Error retrieving location: {message}";
        LocationFound = false;
    }

    public class PositionData
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371; // Radius of Earth in kilometers
        var dLat = ToRadians(lat2 - lat1);
        var dLon = ToRadians(lon2 - lon1);

        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return Math.Round(R * c * 0.621371, 2);
    }

    private double ToRadians(double deg) => deg * Math.PI / 180;

}
