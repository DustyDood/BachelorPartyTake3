@page "/Stepthree"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json


<h3>Puzzle Three</h3>

<h2>🌍 Guess the <strong>C</strong>ountry Challenge</h2>

<p>
    <em>Welcome, traveler!</em><br>
    You're about to emba<strong>r</strong>k on a geography guessing game. Your mission: figure out the mystery country I've locked away in my digital vault.
</p>

<h3>🕹️ How to Play:</h3>
<ul>
    <li>Type the name of any c<strong>o</strong>untry.</li>
    <li>I’ll tell you ho<strong>w</strong> close your guess is to the mystery country using distance clues.</li>
    <li>Keep guessing until you crack it!</li>
</ul>

<h3>🔥 Clue Scale:</h3>
<table border="1" cellpadding="5">
    <tr>
        <th>Feedback</th>
        <th>Meaning</th>
    </tr>
    <tr>
        <td>🔥 Very Hot</td>
        <td>Less than 500 km away</td>
    </tr>
    <tr>
        <td>🌡️ Warm</td>
        <td>500–1500 km away</td>
    </tr>
    <tr>
        <td>❄️ Cold</td>
        <td>1500–4000 km away</td>
    </tr>
    <tr>
        <td>🧊 Freezing</td>
        <td>More than 4000 km away</td>
    </tr>
</table>

<p>
    <strong>Example:</strong><br>
    You guess “Germany.” I reply:<br>
    <em>🌡️ Warm — about 800 km away.</em>
</p>

<p>NOTE: <strong>D</strong>istances are calculated based on the country's center!</p>

<input @bind="userGuess" placeholder="Enter a country name" />
<button @onclick="SubmitGuess">Guess</button>

<p>@clue</p>

<button class="btn btn-primary">Find your location below</button>

@if (countryFound)
{
    <p>Speaking of Hungary, I hope you're <strong>Hung</strong>a<strong>ry</strong>!</p>
}



@if (LocationFound)
{
    <button>Click me once you have finished this location's activity!</button>
}


@code {
    private string userGuess = "";
    private string clue = "";
    private bool countryFound = false;
    public bool LocationFound { get; set; }


    // Mystery country coordinates
    private double mysteryLat = 47.1625;
    private double mysteryLon = 19.5033;

    private async Task SubmitGuess()
    {
        try
        {
            if (userGuess.ToLower()=="hungary")
            {
                clue = GetClueFromDistance(0);
                return;
            }
            var url = $"https://restcountries.com/v3.1/name/{userGuess}";
            var response = await Http.GetFromJsonAsync<List<RestCountry>>(url);

            if (response != null && response.Count > 0)
            {
                var guessedLat = response[0].LatLng[0];
                var guessedLon = response[0].LatLng[1];

                var distance = CalculateDistance(guessedLat, guessedLon, mysteryLat, mysteryLon);
                clue = GetClueFromDistance(distance);
            }
            else
            {
                clue = "❌ Country not found. Try again.";
            }
        }
        catch
        {
            clue = "⚠️ Error fetching country data.";
        }
    }

    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371; // Earth radius in km
        var dLat = ToRadians(lat2 - lat1);
        var dLon = ToRadians(lon2 - lon1);

        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c;
    }

    private double ToRadians(double deg) => deg * Math.PI / 180;

    private string GetClueFromDistance(double distance)
    {
        if (distance <= 0)
        {
            countryFound = true;
            return $"✨🎊🎉🥳💥 You are correct! The country is Hungary";
        }
        if (distance < 500) return $"🔥 Very Hot — {Math.Round(distance)} km away. You're basically adjacent!";
        if (distance < 1500) return $"🌡️ Warm — {Math.Round(distance)} km away.";
        if (distance < 4000) return $"❄️ Cold — {Math.Round(distance)} km away.";
        return $"🧊 Freezing — {Math.Round(distance)} km away.";
    }

    public class RestCountry
    {
        public List<double> LatLng { get; set; }
    }

    @code {
    private string? Latitude { get; set; }
    private string? Longitude { get; set; }
    private string? ErrorMessage { get; set; }

    private async Task GetLocationAsync()
    {
        try
        {
            var position = await JSRuntime.InvokeAsync<GeolocationPosition>("navigator.geolocation.getCurrentPosition");
            Latitude = position.Coords.Latitude.ToString();
            Longitude = position.Coords.Longitude.ToString();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error retrieving location: {ex.Message}";
        }
    }

    public class GeolocationPosition
    {
        public GeolocationCoordinates Coords { get; set; } = new();
    }

    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
}
