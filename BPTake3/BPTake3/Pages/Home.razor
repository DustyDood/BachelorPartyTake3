@inject IJSRuntime JSRuntime

@page "/"

<PageTitle>Home</PageTitle>

<h3>Hello, and welcome to the start of your bachelor party!</h3>

<p>Today's adventure is like a scavenger hunt. On each page, you'll have some form of puzzle and a button. The puzzle will point you to where you need to go next, while the button will confirm your location and how close/far you are.</p>

<p>Right now, everyone should be on their way here to celebrate your bachelor party! For now, we'll test to make sure this application is working correctly.</p>

<p>For this first puzzle, I've set up the location to be your house. If successful, you'll be taken to the next page.</p>
    
<p>If it's not successful... I will be sad, but we can manually navigate the tree. Please DO NOT use the navigation tree otherwise!</p>

<p>Now, let's go ahead and try that button!</p>

<button class="btn btn-primary">Find your location below</button>

@if (LocationFound)
{
    <button>Click me once you have finished this location's activity!</button>
}


@code {
    private string? Latitude { get; set; }
    private string? Longitude { get; set; }
    private string? ErrorMessage { get; set; }
    public bool LocationFound { get; set; }

    private async Task GetLocationAsync()
    {
        try
        {
            var position = await JSRuntime.InvokeAsync<GeolocationPosition>("navigator.geolocation.getCurrentPosition");
            Latitude = position.Coords.Latitude.ToString();
            Longitude = position.Coords.Longitude.ToString();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error retrieving location: {ex.Message}";
        }
    }

    public class GeolocationPosition
    {
        public GeolocationCoordinates Coords { get; set; } = new();
    }

    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}

